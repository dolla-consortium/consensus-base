-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Folder watching as a Streamly stream.
--   
--   Provides Streamly streams for both single-level and recursive folder
--   watching. Also contains a principled and compositional system for
--   filtering file system events.
@package streamly-fsnotify
@version 1.1.1.0


-- | <b>Introduction</b>
--   
--   This provides file watching as a Streamly stream. You can either watch
--   recursively (namely, a directory's contents and all its subdirectories
--   as well), or not. You can also filter out file system events you are
--   not interested in. Lastly, we provide a compositional scheme for
--   constructing filters for file system events.
--   
--   <b>Example</b>
--   
--   This example program watches <tt>/home/koz/c-project</tt> (and any of
--   its subdirectories) for added or modified files with a <tt>.c</tt>
--   extension, and emits the change to the terminal, along with a
--   timestamp of when it happened, forever:
--   
--   <pre>
--   import System.FilePath ((&lt;/&gt;))
--   import Streamly.FSNotify (EventPredicate, hasExtension, isDirectory, invert, isDeletion, conj, watchTree)
--   import qualified Streamly.Prelude as SP
--   
--   -- conj -&gt; both must be true
--   -- invert -&gt; true when the argument would be false and vice versa
--   isCSourceFile :: EventPredicate
--   isCSourceFile = hasExtension "c" `conj` invert isDirectory
--   
--   notDeletion :: EventPredicate
--   notDeletion = invert isDeletion
--   
--   srcPath :: FilePath
--   srcPath = "home" &lt;/&gt; "koz" &lt;/&gt; "c-project"
--   
--   -- first value given by watchTree stops the watcher
--   -- we don't use it here, but if you want to, just call it
--   main :: IO ()
--   main = do
--       (_, stream) &lt;- watchTree srcPath $ isCSourceFile `conj` notDeletion
--       SP.drain . SP.mapM go $ stream
--     where
--       go = \case
--           Added p t _ -&gt; putStrLn $ "Created: " ++ show p ++ " at " ++ show t
--           Modified p t _ -&gt; putStrLn $ "Modified: " ++ show p ++ " at " ++ show t
--           _ -&gt; pure ()
--   </pre>
module Streamly.FSNotify

-- | Allows us to designate <a>Event</a>s as being fired by a directory or
--   a non-directory entry.
data FSEntryType
Dir :: FSEntryType
NotDir :: FSEntryType

-- | A file system notification.
data Event

-- | Creation event
Added :: FilePath -> UTCTime -> FSEntryType -> Event

-- | Modification event
Modified :: FilePath -> UTCTime -> FSEntryType -> Event

-- | Deletion event
Removed :: FilePath -> UTCTime -> FSEntryType -> Event

-- | Some other kind of event
Other :: FilePath -> UTCTime -> Text -> Event

-- | An object, which, when executed with <a>stopWatching</a>, stops a file
--   system watch.
data StopWatching m

-- | Helper to retrieve the file path associated with an event.
eventPath :: Event -> FilePath

-- | Helper to retrieve an event's timestamp.
eventTime :: Event -> UTCTime

-- | Helper to retrieve whether the event stems from a directory or not.
--   Returns <a>Nothing</a> if the event is not 'basic' (that is, not a
--   creation, modification or deletion).
eventFSEntry :: Event -> Maybe FSEntryType

-- | A 'test' for whether we want to 'notice' an event. Should return
--   <a>True</a> for events we care about.
newtype EventPredicate
EventPredicate :: (Event -> Bool) -> EventPredicate
[runPredicate] :: EventPredicate -> Event -> Bool

-- | The trivial predicate (allows any event through).
everything :: EventPredicate

-- | The null predicate (allows no events through).
nothing :: EventPredicate

-- | Allows through events that are caused by directories. Note that this
--   will assume that non-'basic' events (that is, not creations,
--   modifications or deletions) do not stem from directories; use with
--   care.
isDirectory :: EventPredicate

-- | Allows through events triggered by file system entries with a specific
--   extension.
hasExtension :: FilePath -> EventPredicate

-- | Allows through only creation events.
isCreation :: EventPredicate

-- | Allows through only modification events.
isModification :: EventPredicate

-- | Allows through only deletion events.
isDeletion :: EventPredicate

-- | Allows through only 'basic' events (namely creation, modification and
--   deletion).
isBasic :: EventPredicate

-- | 'Flips' the predicate - what it used to allow through is now blocked,
--   and vice versa.
invert :: EventPredicate -> EventPredicate

-- | Predicate conjunction (meaning that <i>both</i> have to be true for
--   the result to be true). Synonym for <a>times</a>.
conj :: EventPredicate -> EventPredicate -> EventPredicate

-- | Predicate disjunction (meaning that <i>either</i> has to be true for
--   the result to be true). Synonym for <a>plus</a>.
disj :: EventPredicate -> EventPredicate -> EventPredicate

-- | Watch a given directory, but only at one level (thus, subdirectories
--   will <b>not</b> be watched recursively).
watchDirectory :: (IsStream t, MonadAsync m) => FilePath -> EventPredicate -> m (StopWatching m, t m Event)

-- | As <a>watchDirectory</a>, but with a specified set of watch options.
watchDirectoryWith :: (IsStream t, MonadAsync m) => WatchConfig -> FilePath -> EventPredicate -> m (StopWatching m, t m Event)

-- | Watch a given directory recursively (thus, subdirectories will also
--   have their contents watched).
watchTree :: (IsStream t, MonadAsync m) => FilePath -> EventPredicate -> m (StopWatching m, t m Event)

-- | As <a>watchTree</a>, but with a specified set of watch options.
watchTreeWith :: (IsStream t, MonadAsync m) => WatchConfig -> FilePath -> EventPredicate -> m (StopWatching m, t m Event)
instance GHC.Show.Show Streamly.FSNotify.Event
instance GHC.Classes.Eq Streamly.FSNotify.Event
instance GHC.Enum.Enum Streamly.FSNotify.FSEntryType
instance GHC.Enum.Bounded Streamly.FSNotify.FSEntryType
instance GHC.Read.Read Streamly.FSNotify.FSEntryType
instance GHC.Show.Show Streamly.FSNotify.FSEntryType
instance GHC.Classes.Eq Streamly.FSNotify.FSEntryType
instance Data.Semiring.Semiring Streamly.FSNotify.EventPredicate
